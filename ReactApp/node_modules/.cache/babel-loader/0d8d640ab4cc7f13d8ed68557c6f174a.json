{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = min;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @name min\r\n * @category Common Helpers\r\n * @summary Return the earliest of the given dates.\r\n *\r\n * @description\r\n * Return the earliest of the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - `min` function now accepts an array of dates rather than spread arguments.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   var date1 = new Date(1989, 6, 10)\r\n *   var date2 = new Date(1987, 1, 11)\r\n *   var minDate = min(date1, date2)\r\n *\r\n *   // v2.0.0 onward:\r\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\r\n *   var minDate = min(dates)\r\n *   ```\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the earliest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the earliest?\r\n * var result = min([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Wed Feb 11 1987 00:00:00\r\n */\n\n\nfunction min(dirtyDatesArray) {\n  (0, _index2.default)(1, arguments);\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\n\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\n  } else {\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\n    return new Date(NaN);\n  }\n\n  var result;\n  datesArray.forEach(function (dirtyDate) {\n    var currentDate = (0, _index.default)(dirtyDate);\n\n    if (result === undefined || result > currentDate || isNaN(currentDate)) {\n      result = currentDate;\n    }\n  });\n  return result || new Date(NaN);\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/aaron/Documents/Clips/Clips/reactapp/node_modules/date-fns/min/index.js"],"names":["Object","defineProperty","exports","value","default","min","_index","_interopRequireDefault","require","_index2","obj","__esModule","dirtyDatesArray","arguments","datesArray","forEach","Array","prototype","slice","call","Date","NaN","result","dirtyDate","currentDate","undefined","isNaN","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,GAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,GAAT,CAAaO,eAAb,EAA8B;AAC5B,GAAC,GAAGH,OAAO,CAACL,OAAZ,EAAqB,CAArB,EAAwBS,SAAxB;AACA,MAAIC,UAAJ,CAF4B,CAEZ;;AAEhB,MAAIF,eAAe,IAAI,OAAOA,eAAe,CAACG,OAAvB,KAAmC,UAA1D,EAAsE;AACpED,IAAAA,UAAU,GAAGF,eAAb,CADoE,CACtC;AAC/B,GAFD,MAEO,IAAI,OAAOA,eAAP,KAA2B,QAA3B,IAAuCA,eAAe,KAAK,IAA/D,EAAqE;AAC1EE,IAAAA,UAAU,GAAGE,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BP,eAA3B,CAAb;AACD,GAFM,MAEA;AACL;AACA,WAAO,IAAIQ,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAIC,MAAJ;AACAR,EAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUQ,SAAV,EAAqB;AACtC,QAAIC,WAAW,GAAG,CAAC,GAAGlB,MAAM,CAACF,OAAX,EAAoBmB,SAApB,CAAlB;;AAEA,QAAID,MAAM,KAAKG,SAAX,IAAwBH,MAAM,GAAGE,WAAjC,IAAgDE,KAAK,CAACF,WAAD,CAAzD,EAAwE;AACtEF,MAAAA,MAAM,GAAGE,WAAT;AACD;AACF,GAND;AAOA,SAAOF,MAAM,IAAI,IAAIF,IAAJ,CAASC,GAAT,CAAjB;AACD;;AAEDM,MAAM,CAACzB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = min;\r\n\r\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\r\n\r\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @name min\r\n * @category Common Helpers\r\n * @summary Return the earliest of the given dates.\r\n *\r\n * @description\r\n * Return the earliest of the given dates.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - `min` function now accepts an array of dates rather than spread arguments.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   var date1 = new Date(1989, 6, 10)\r\n *   var date2 = new Date(1987, 1, 11)\r\n *   var minDate = min(date1, date2)\r\n *\r\n *   // v2.0.0 onward:\r\n *   var dates = [new Date(1989, 6, 10), new Date(1987, 1, 11)]\r\n *   var minDate = min(dates)\r\n *   ```\r\n *\r\n * @param {Date[]|Number[]} datesArray - the dates to compare\r\n * @returns {Date} the earliest of the dates\r\n * @throws {TypeError} 1 argument required\r\n *\r\n * @example\r\n * // Which of these dates is the earliest?\r\n * var result = min([\r\n *   new Date(1989, 6, 10),\r\n *   new Date(1987, 1, 11),\r\n *   new Date(1995, 6, 2),\r\n *   new Date(1990, 0, 1)\r\n * ])\r\n * //=> Wed Feb 11 1987 00:00:00\r\n */\r\nfunction min(dirtyDatesArray) {\r\n  (0, _index2.default)(1, arguments);\r\n  var datesArray; // `dirtyDatesArray` is Array, Set or Map, or object with custom `forEach` method\r\n\r\n  if (dirtyDatesArray && typeof dirtyDatesArray.forEach === 'function') {\r\n    datesArray = dirtyDatesArray; // If `dirtyDatesArray` is Array-like Object, convert to Array.\r\n  } else if (typeof dirtyDatesArray === 'object' && dirtyDatesArray !== null) {\r\n    datesArray = Array.prototype.slice.call(dirtyDatesArray);\r\n  } else {\r\n    // `dirtyDatesArray` is non-iterable, return Invalid Date\r\n    return new Date(NaN);\r\n  }\r\n\r\n  var result;\r\n  datesArray.forEach(function (dirtyDate) {\r\n    var currentDate = (0, _index.default)(dirtyDate);\r\n\r\n    if (result === undefined || result > currentDate || isNaN(currentDate)) {\r\n      result = currentDate;\r\n    }\r\n  });\r\n  return result || new Date(NaN);\r\n}\r\n\r\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}