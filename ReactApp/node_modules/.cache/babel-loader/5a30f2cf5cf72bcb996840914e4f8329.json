{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = addMonths;\n\nvar _index = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @name addMonths\r\n * @category Month Helpers\r\n * @summary Add the specified number of months to the given date.\r\n *\r\n * @description\r\n * Add the specified number of months to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the months added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 5 months to 1 September 2014:\r\n * const result = addMonths(new Date(2014, 8, 1), 5)\r\n * //=> Sun Feb 01 2015 00:00:00\r\n */\n\n\nfunction addMonths(dirtyDate, dirtyAmount) {\n  (0, _index3.default)(2, arguments);\n  var date = (0, _index2.default)(dirtyDate);\n  var amount = (0, _index.default)(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/aaron/Documents/Clips/Clips/ReactApp/node_modules/date-fns/addMonths/index.js"],"names":["Object","defineProperty","exports","value","default","addMonths","_index","_interopRequireDefault","require","_index2","_index3","obj","__esModule","dirtyDate","dirtyAmount","arguments","date","amount","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,SAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAApC;;AAEA,IAAIE,OAAO,GAAGH,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASN,SAAT,CAAmBQ,SAAnB,EAA8BC,WAA9B,EAA2C;AACzC,GAAC,GAAGJ,OAAO,CAACN,OAAZ,EAAqB,CAArB,EAAwBW,SAAxB;AACA,MAAIC,IAAI,GAAG,CAAC,GAAGP,OAAO,CAACL,OAAZ,EAAqBS,SAArB,CAAX;AACA,MAAII,MAAM,GAAG,CAAC,GAAGX,MAAM,CAACF,OAAX,EAAoBU,WAApB,CAAb;;AAEA,MAAII,KAAK,CAACD,MAAD,CAAT,EAAmB;AACjB,WAAO,IAAIE,IAAJ,CAASC,GAAT,CAAP;AACD;;AAED,MAAI,CAACH,MAAL,EAAa;AACX;AACA,WAAOD,IAAP;AACD;;AAED,MAAIK,UAAU,GAAGL,IAAI,CAACM,OAAL,EAAjB,CAdyC,CAcR;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,iBAAiB,GAAG,IAAIJ,IAAJ,CAASH,IAAI,CAACQ,OAAL,EAAT,CAAxB;AACAD,EAAAA,iBAAiB,CAACE,QAAlB,CAA2BT,IAAI,CAACU,QAAL,KAAkBT,MAAlB,GAA2B,CAAtD,EAAyD,CAAzD;AACA,MAAIU,WAAW,GAAGJ,iBAAiB,CAACD,OAAlB,EAAlB;;AAEA,MAAID,UAAU,IAAIM,WAAlB,EAA+B;AAC7B;AACA;AACA,WAAOJ,iBAAP;AACD,GAJD,MAIO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACAP,IAAAA,IAAI,CAACY,WAAL,CAAiBL,iBAAiB,CAACM,WAAlB,EAAjB,EAAkDN,iBAAiB,CAACG,QAAlB,EAAlD,EAAgFL,UAAhF;AACA,WAAOL,IAAP;AACD;AACF;;AAEDc,MAAM,CAAC5B,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = addMonths;\r\n\r\nvar _index = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\r\n\r\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\r\n\r\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @name addMonths\r\n * @category Month Helpers\r\n * @summary Add the specified number of months to the given date.\r\n *\r\n * @description\r\n * Add the specified number of months to the given date.\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date to be changed\r\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\r\n * @returns {Date} the new date with the months added\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Add 5 months to 1 September 2014:\r\n * const result = addMonths(new Date(2014, 8, 1), 5)\r\n * //=> Sun Feb 01 2015 00:00:00\r\n */\r\nfunction addMonths(dirtyDate, dirtyAmount) {\r\n  (0, _index3.default)(2, arguments);\r\n  var date = (0, _index2.default)(dirtyDate);\r\n  var amount = (0, _index.default)(dirtyAmount);\r\n\r\n  if (isNaN(amount)) {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  if (!amount) {\r\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\r\n    return date;\r\n  }\r\n\r\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\r\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\r\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\r\n  // want except that dates will wrap around the end of a month, meaning that\r\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\r\n  // we'll default to the end of the desired month by adding 1 to the desired\r\n  // month and using a date of 0 to back up one day to the end of the desired\r\n  // month.\r\n\r\n  var endOfDesiredMonth = new Date(date.getTime());\r\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\r\n  var daysInMonth = endOfDesiredMonth.getDate();\r\n\r\n  if (dayOfMonth >= daysInMonth) {\r\n    // If we're already at the end of the month, then this is the correct date\r\n    // and we're done.\r\n    return endOfDesiredMonth;\r\n  } else {\r\n    // Otherwise, we now know that setting the original day-of-month value won't\r\n    // cause an overflow, so set the desired day-of-month. Note that we can't\r\n    // just set the date of `endOfDesiredMonth` because that object may have had\r\n    // its time changed in the unusual case where where a DST transition was on\r\n    // the last day of the month and its local time was in the hour skipped or\r\n    // repeated next to a DST transition.  So we use `date` instead which is\r\n    // guaranteed to still have the original time.\r\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\r\n    return date;\r\n  }\r\n}\r\n\r\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}