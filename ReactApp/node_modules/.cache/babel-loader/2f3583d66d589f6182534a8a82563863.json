{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBefore;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\r\n * @name isBefore\r\n * @category Common Helpers\r\n * @summary Is the first date before the second one?\r\n *\r\n * @description\r\n * Is the first date before the second one?\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date that should be before the other one to return true\r\n * @param {Date|Number} dateToCompare - the date to compare with\r\n * @returns {Boolean} the first date is before the second date\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Is 10 July 1989 before 11 February 1987?\r\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\r\n * //=> false\r\n */\n\n\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\n  (0, _index2.default)(2, arguments);\n  var date = (0, _index.default)(dirtyDate);\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}\n\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/aaron/Documents/Clips/Clips/reactapp/node_modules/date-fns/isBefore/index.js"],"names":["Object","defineProperty","exports","value","default","isBefore","_index","_interopRequireDefault","require","_index2","obj","__esModule","dirtyDate","dirtyDateToCompare","arguments","date","dateToCompare","getTime","module"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,MAAM,GAAGC,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAAnC;;AAEA,IAAIC,OAAO,GAAGF,sBAAsB,CAACC,OAAO,CAAC,+BAAD,CAAR,CAApC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEN,IAAAA,OAAO,EAAEM;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASL,QAAT,CAAkBO,SAAlB,EAA6BC,kBAA7B,EAAiD;AAC/C,GAAC,GAAGJ,OAAO,CAACL,OAAZ,EAAqB,CAArB,EAAwBU,SAAxB;AACA,MAAIC,IAAI,GAAG,CAAC,GAAGT,MAAM,CAACF,OAAX,EAAoBQ,SAApB,CAAX;AACA,MAAII,aAAa,GAAG,CAAC,GAAGV,MAAM,CAACF,OAAX,EAAoBS,kBAApB,CAApB;AACA,SAAOE,IAAI,CAACE,OAAL,KAAiBD,aAAa,CAACC,OAAd,EAAxB;AACD;;AAEDC,MAAM,CAAChB,OAAP,GAAiBA,OAAO,CAACE,OAAzB","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = isBefore;\r\n\r\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\r\n\r\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\r\n\r\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\r\n\r\n/**\r\n * @name isBefore\r\n * @category Common Helpers\r\n * @summary Is the first date before the second one?\r\n *\r\n * @description\r\n * Is the first date before the second one?\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * @param {Date|Number} date - the date that should be before the other one to return true\r\n * @param {Date|Number} dateToCompare - the date to compare with\r\n * @returns {Boolean} the first date is before the second date\r\n * @throws {TypeError} 2 arguments required\r\n *\r\n * @example\r\n * // Is 10 July 1989 before 11 February 1987?\r\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\r\n * //=> false\r\n */\r\nfunction isBefore(dirtyDate, dirtyDateToCompare) {\r\n  (0, _index2.default)(2, arguments);\r\n  var date = (0, _index.default)(dirtyDate);\r\n  var dateToCompare = (0, _index.default)(dirtyDateToCompare);\r\n  return date.getTime() < dateToCompare.getTime();\r\n}\r\n\r\nmodule.exports = exports.default;"]},"metadata":{},"sourceType":"script"}